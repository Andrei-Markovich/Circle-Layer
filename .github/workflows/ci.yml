name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # то, что нужно для Hardhat
      CIRCLE_RPC_URL: ${{ secrets.CIRCLE_RPC_URL }}     # основной RPC
      PRIVATE_KEY:    ${{ secrets.PRIVATE_KEY }}        # 64 hex (можно с 0x)
      CHAIN_ID:       ${{ vars.CHAIN_ID }}              # 28525 (можно как VAR)
      # опционально: список фоллбэков через запятую (можно задать в repo Variables)
      FALLBACK_RPC_URLS: ${{ vars.FALLBACK_RPC_URLS }}

      # npm: без optional зависимостей (fsevents и т.п.)
      CI: "true"
      NPM_CONFIG_AUDIT: "false"
      NPM_CONFIG_FUND:  "false"
      NPM_CONFIG_OPTIONAL: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # Установка зависимостей + игнор EBADPLATFORM (fsevents на Linux)
      - name: Install deps (Linux-safe, omit optional)
        shell: bash
        run: |
          set -e
          echo "Trying: npm ci --omit=optional --no-optional"
          if npm ci --omit=optional --no-optional; then
            echo "npm ci OK"
          else
            echo "::warning::npm ci failed, checking for EBADPLATFORM in npm logs…"
            if grep -Eiq 'EBADPLATFORM|Unsupported platform.*fsevents' /home/runner/.npm/_logs/*-debug-*.log; then
              echo "::notice::Ignoring EBADPLATFORM for fsevents on Linux and continuing."
            else
              echo "::error::npm ci failed for a different reason."
              exit 1
            fi
          fi
          npm prune --omit=optional
          npm ls fsevents || true

      # На всякий: ставим analyzer + dotenv, если вдруг не подтянулось
      - name: Ensure Hardhat analyzer + dotenv
        shell: bash
        run: |
          node -e "try{require.resolve('dotenv');process.exit(0)}catch(e){process.exit(1)}" || npm i -D dotenv
          node -e "try{require.resolve('@nomicfoundation/solidity-analyzer-linux-x64-gnu');process.exit(0)}catch(e){process.exit(1)}" \
            || npm i -D @nomicfoundation/solidity-analyzer-linux-x64-gnu

      - name: Compile (verbose)
        shell: bash
        run: |
          echo "Hardhat compile…"
          npx hardhat compile

      - name: Export ABI for artifacts
        run: node scripts/exportAbi.js

      - name: List outputs
        shell: bash
        run: |
          echo "## Files" >> $GITHUB_STEP_SUMMARY
          ls -la abi || true >> $GITHUB_STEP_SUMMARY
          ls -la deployments || true >> $GITHUB_STEP_SUMMARY
          ls -la artifacts/contracts || true >> $GITHUB_STEP_SUMMARY

      # Загружаем артефакты
      - name: Upload ABI
        uses: actions/upload-artifact@v4
        with:
          name: abi-${{ github.sha }}
          path: abi/SimpleStorage.json
          if-no-files-found: error
          retention-days: 7

      - name: Upload deployment JSON (optional)
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployments/**/SimpleStorage.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload hardhat artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: hardhat-artifact-${{ github.sha }}
          path: artifacts/contracts/SimpleStorage.sol/SimpleStorage.json
          if-no-files-found: ignore
          retention-days: 7

      # ----------- ПРЕФЛАЙТ ДЛЯ ДЕПЛОЯ (только вручную) -----------

      - name: Preflight – validate RPC & secrets (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        env:
          EXPECTED_CHAINID_HEX: "0x6f6d"   # 28525
        run: |
          set -e

          if [ -z "${CIRCLE_RPC_URL:-}" ]; then
            echo "::error::CIRCLE_RPC_URL secret is empty."; exit 1
          fi
          if ! echo "$CIRCLE_RPC_URL" | grep -Eqi '^https?://'; then
            echo "::error::CIRCLE_RPC_URL must start with http(s)://"; exit 1
          fi

          if [ -z "${PRIVATE_KEY:-}" ]; then
            echo "::error::PRIVATE_KEY secret is empty."; exit 1
          fi
          HEX="${PRIVATE_KEY#0x}"
          if ! echo -n "$HEX" | grep -Eq '^[0-9a-fA-F]{64}$'; then
            echo "::error::PRIVATE_KEY must be 64 hex chars (with optional 0x)."; exit 1
          fi

          echo "Ping primary RPC: $CIRCLE_RPC_URL"
          RES="$(curl -sS -X POST -H 'content-type: application/json' \
            --data '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' \
            "$CIRCLE_RPC_URL" || true)"
          echo "RPC response: $RES"

          if echo "$RES" | grep -qE '"code":\s*5[0-9]{2}'; then
            echo "::error::RPC returned 5xx (e.g. 521). Use fallback or re-run later."; exit 1
          fi
          if echo "$RES" | grep -qi "\"result\":\"$EXPECTED_CHAINID_HEX\""; then
            echo "RPC OK: chainId = $EXPECTED_CHAINID_HEX"
          else
            echo "::error::Unexpected chainId. Expected $EXPECTED_CHAINID_HEX."; exit 1
          fi

      # ----------- ДЕПЛОЙ С ФОЛЛБЭКАМИ И РЕТРАЕМ (только вручную) -----------

      - name: Deploy SimpleStorage (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        env:
          HARDHAT_NETWORK: circleLayerTestnet
          EXPECTED_CHAINID_HEX: "0x6f6d"
        run: |
          set -e

          pick_working_rpc () {
            local list="$1"
            IFS=',' read -ra RPCS <<< "$list"
            for r in "${RPCS[@]}"; do
              r="$(echo "$r" | xargs)"   # trim
              [ -z "$r" ] && continue
              echo "Probing RPC: $r"
              local res
              res="$(curl -sS -X POST -H 'content-type: application/json' \
                  --data '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' "$r" || true)"
              if echo "$res" | grep -qi "\"result\":\"$EXPECTED_CHAINID_HEX\""; then
                echo "Using RPC: $r"
                echo "$r"
                return 0
              else
                echo "Not suitable: $res"
              fi
            done
            return 1
          }

          # формируем список: основной + фоллбэки
          RPC_LIST="$CIRCLE_RPC_URL"
          if [ -n "${FALLBACK_RPC_URLS:-}" ]; then
            RPC_LIST="$RPC_LIST,${FALLBACK_RPC_URLS}"
          fi

          # выбираем «живой» RPC
          CHOSEN_RPC="$(pick_working_rpc "$RPC_LIST")" || {
            echo "::error::No working RPC endpoint found."; exit 1;
          }
          export CIRCLE_RPC_URL="$CHOSEN_RPC"

          echo "Deploy attempt #1…"
          if npx hardhat run --network circleLayerTestnet scripts/deploy.js; then
            echo "Deploy OK (1st try)"; exit 0
          fi

          echo "First attempt failed — sleep 10s and retry"
          sleep 10

          echo "Deploy attempt #2…"
          npx hardhat run --network circleLayerTestnet scripts/deploy.js

      # адрес контракта печатается в логах deploy.js; тут можно выгрузить его, если вы сохраняете файл
      - name: Upload deployed address (optional)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: deployed-address-${{ github.sha }}
          path: deployments/**/SimpleStorage.json
          if-no-files-found: ignore
          retention-days: 7

      # Пробное чтение (если адрес есть и RPC жив)
      - name: Smoke read freshly deployed (optional)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          SIMPLE_STORAGE: ${{ vars.SIMPLE_STORAGE }}
        run: |
          # Если у вас в deploy.js сохраняется адрес в deployments/**, можно достать его и подставить сюда
          echo "Smoke read step (optional done)"
