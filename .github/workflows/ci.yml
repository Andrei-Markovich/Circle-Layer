name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SIMPLE_STORAGE: ${{ vars.SIMPLE_STORAGE }}
      CIRCLE_RPC_URL: ${{ secrets.CIRCLE_RPC_URL }}
      CHAIN_ID: ${{ vars.CHAIN_ID }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Show versions
        run: |
          node -v
          npm -v

      - name: Install deps (Linux-safe, omit optional)
        shell: bash
        env:
          NPM_CONFIG_OPTIONAL: "false"
        run: |
          set -e
          # Устанавливаем зависимости. Если падение из-за EBADPLATFORM (fsevents на Linux) — продолжаем.
          npm ci --omit=optional || {
            echo "::warning::npm ci failed, checking for EBADPLATFORM in npm debug log…"
            if grep -q 'EBADPLATFORM' /home/runner/.npm/_logs/*-debug-0.log; then
              echo "::notice::Detected EBADPLATFORM for fsevents on Linux — ignoring and continuing."
            else
              echo "::error::npm ci failed for a different reason."; exit 1
            fi
          }
          npm prune --omit=optional
          npm ls fsevents || true

      - name: Ensure Hardhat toolchain (Linux analyzer + TypeChain if needed)
        shell: bash
        run: |
          set -e
          # Всегда ставим Linux-анализатор для hardhat-toolbox
          npm i -D @nomicfoundation/solidity-analyzer-linux-x64-gnu
          # Если в конфиге включён TypeChain — доставим плагины
          if grep -q "@typechain/hardhat" hardhat.config.* 2>/dev/null; then
            echo "TypeChain detected in hardhat.config — installing devDeps…"
            npm i -D @typechain/hardhat typechain @typechain/ethers-v6
            # Если конфиг на TypeScript — поставим TS тулчейн
            if [ -f tsconfig.json ] || grep -q "hardhat.config.ts" <<< "$(ls -1 2>/dev/null)"; then
              npm i -D typescript ts-node
            fi
          fi

      - name: Print project tree
        run: |
          echo "### contracts/"
          ls -la contracts || true
          echo "### hardhat.config.*"
          ls -la hardhat.config.* || true
          echo "### package.json"
          cat package.json

      - name: Compile (verbose)
        shell: bash
        run: |
          set -e
          echo "----- hardhat.config (preview) -----"
          if [ -f hardhat.config.js ]; then sed -n '1,160p' hardhat.config.js; fi
          if [ -f hardhat.config.ts ]; then sed -n '1,160p' hardhat.config.ts; fi
          echo "------------------------------------"
          npx hardhat clean
          # Максимально подробный вывод трассы
          npx hardhat compile --show-stack-traces

      - name: Export ABI for artifacts
        run: node scripts/exportAbi.js

      - name: List outputs
        run: |
          echo "## Files" >> $GITHUB_STEP_SUMMARY
          ls -la abi || true >> $GITHUB_STEP_SUMMARY
          ls -la deployments || true >> $GITHUB_STEP_SUMMARY
          ls -la artifacts/contracts/SimpleStorage.sol || true >> $GITHUB_STEP_SUMMARY

      # Загружаем ABI — должен быть всегда
      - name: Upload ABI
        uses: actions/upload-artifact@v4
        with:
          name: abi-${{ github.sha }}
          path: abi/SimpleStorage.json
          if-no-files-found: error
          retention-days: 7

      # Остальные артефакты — опционально
      - name: Upload deployment JSON (optional)
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployments/**/SimpleStorage.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload hardhat artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: hardhat-artifact-${{ github.sha }}
          path: artifacts/contracts/SimpleStorage.sol/SimpleStorage.json
          if-no-files-found: ignore
          retention-days: 7

      # Дешёвый smoke-тест чтения из сети — только если заданы адрес и RPC
      - name: "Smoke: read SimpleStorage (optional)"
        if: ${{ env.SIMPLE_STORAGE != '' && env.CIRCLE_RPC_URL != '' }}
        run: npx hardhat run --network circleLayerTestnet scripts/read.js
